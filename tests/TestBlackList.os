Перем юТест;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	МассивТестов = Новый Массив;
	МассивТестов.Добавить("ТестПроверкаБезОшибок");
	МассивТестов.Добавить("ТестПроверкаТипаСтроки");
	МассивТестов.Добавить("ТестПроверкаТипаЧисла");
	МассивТестов.Добавить("ТестПроверкаТипаБулево");
	МассивТестов.Добавить("ТестПроверкаОбязательногоСвойства");
	МассивТестов.Добавить("ТестПроверкаПеречислений");
	МассивТестов.Добавить("ТестПроверкаВложеннойСхемыКакСсылки");
	
	Возврат МассивТестов;
	
КонецФункции

#Область Тесты

Процедура ТестПроверкаБезОшибок() Экспорт
	
	ПроверяемаяМодель = КорректнаяМодель_persons_blackListRecord();
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"persons.blackListRecord", ТекстСпецификации);
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаТипаСтроки() Экспорт
	
	ПроверяемаяМодель = КорректнаяМодель_persons_blackListRecord();
	ПроверяемаяМодель.passport.series = 1214;
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректный тип свойства ""passport.series"" (Серия). Ожидается тип ""Строка"", передан тип ""Число""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"persons.blackListRecord", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаТипаЧисла() Экспорт
	
	ПроверяемаяМодель = КорректнаяМодель_contact_details();
	ПроверяемаяМодель.house = "5";
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректный тип свойства ""house"" (). Ожидается тип ""Число"", передан тип ""Строка""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"contact.details", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаТипаБулево() Экспорт
	
	ПроверяемаяМодель = КорректнаяМодель_persons_blackListRecord();
	ПроверяемаяМодель.isInBlackList = "1214";
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректный тип свойства ""isInBlackList"" (Признак нахождения физического лица в черном списке на момент записи.). Ожидается тип ""Булево"", передан тип ""Строка""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"persons.blackListRecord", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаОбязательногоСвойства() Экспорт
	
	ПроверяемаяМодель = КорректнаяМодель_persons_blackListRecord();
	ПроверяемаяМодель.Удалить("isInBlackList");
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Отсутствует обязательное свойство ""isInBlackList"" (Признак нахождения физического лица в черном списке на момент записи.)."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"persons.blackListRecord", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаПеречислений() Экспорт
	
	ПроверяемаяМодель = КорректнаяМодель_employers_blackListRecord();
	ПроверяемаяМодель.typeСounterparty = "Юр";
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректное значение свойства ""typeСounterparty"" (Вид контрагента). Возможные значения: Юридическое лицо, ИП."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"employers.blackListRecord", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаВложеннойСхемыКакСсылки() Экспорт
	
	ПроверяемаяМодель = КорректнаяМодель_employers_blackListRecord();
	
	ПроверяемаяМодель.address.house = "5";
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректный тип свойства ""address.house"" (). Ожидается тип ""Число"", передан тип ""Строка""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\ЧерныеСписки.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"employers.blackListRecord", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстСпецификацииИзФайла(Знач ИмяФайла)
	
	ТекстСпецификацииИзФайла = "";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	ТекстСпецификацииИзФайла = ТекстовыйДокумент.ПолучитьТекст();
	
	Возврат ТекстСпецификацииИзФайла;
	
КонецФункции

#Область КорректныеМоделиДанных

Функция КорректнаяМодель_persons_blackListRecord()
	
	МодельДанных = Новый Структура;
	МодельДанных.Вставить("date", "2020-07-29T15:39:47");
	МодельДанных.Вставить("isInBlackList", Истина);
	МодельДанных.Вставить("surname", "Иванов");
	МодельДанных.Вставить("name", "Иван");
	МодельДанных.Вставить("patronymic", "Иванович");
	МодельДанных.Вставить("dateOfBirth", "1982-06-14");
	
	passport = Новый Структура;
	passport.Вставить("series", "76 23");
	passport.Вставить("number", "762348");
	passport.Вставить("issuedBy", "ОТДЕЛОМ УФМС РОССИИ");
	passport.Вставить("dateOfIssue", "2008-07-19");
	МодельДанных.Вставить("passport", passport);
	
	Возврат МодельДанных;
	
КонецФункции

Функция КорректнаяМодель_employers_blackListRecord()
	
	МодельДанных = Новый Структура;
	МодельДанных.Вставить("date", "2020-07-29T15:39:47");
	МодельДанных.Вставить("isInBlackList", Истина);
	МодельДанных.Вставить("name", "ООО \Ромашка\");
	МодельДанных.Вставить("inn", "7749698435");
	МодельДанных.Вставить("phone", "8 (495) 487-69-14");
	МодельДанных.Вставить("typeСounterparty", "Юридическое лицо");
	
	address = КорректнаяМодель_contact_details();
	
	МодельДанных.Вставить("address", address);
	
	Возврат МодельДанных;
	
КонецФункции

Функция КорректнаяМодель_contact_details()
	
	address = Новый Структура;
	address.Вставить("street", "Ленинградская");
	address.Вставить("house", 5);
	
	Возврат address;
	
КонецФункции

#КонецОбласти

#КонецОбласти