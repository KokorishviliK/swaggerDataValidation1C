Перем юТест;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	МассивТестов = Новый Массив;
	МассивТестов.Добавить("ТестПроверкаСхемаКакМассивСОшибками");
	МассивТестов.Добавить("ТестПроверкаСхемыСТипомСтрока");
	МассивТестов.Добавить("ТестПроверкаСхемыСТипомСтрокаВвидеВложеннойСхемы");
	МассивТестов.Добавить("ТестПроверкаСхемыСПаттерномСОшибкой");
	МассивТестов.Добавить("ТестПроверкаСхемыСПаттерномБезОшибок");
	
	Возврат МассивТестов;
	
КонецФункции

#Область Тесты

Процедура ТестПроверкаСхемаКакМассивСОшибками() Экспорт
	
	ПроверяемаяМодель = Api3StatResponse();
	
	ПроверяемаяМодель[0].limit = "5000";
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректный тип свойства ""limit"" (Лимит). Ожидается тип ""Число"", передан тип ""Строка""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\КонтурФокус.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"Api3StatResponse", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаСхемыСТипомСтрока() Экспорт
	
	ПроверяемаяМодель = 5555;
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректный тип схемы. Ожидается тип ""Строка"", передан тип ""Число""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\КонтурФокус.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"Api3Date", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаСхемыСТипомСтрокаВвидеВложеннойСхемы() Экспорт
	
	ПроверяемаяМодель = Новый Структура;
	ПроверяемаяМодель.Вставить("sum", 555);
	ПроверяемаяМодель.Вставить("date", 666);
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректный тип свойства ""date"". Ожидается тип ""Строка"", передан тип ""Число""."); // BSLLS:LineLength-off
	
	ИмяФайла = ТекущийСценарий().Каталог + "\КонтурФокус.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"Api3BeneficialOwnersResponseStatedCapital", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаСхемыСПаттерномСОшибкой() Экспорт
	
	ПроверяемаяМодель = Новый Структура;
	ПроверяемаяМодель.Вставить("sum", 555);
	ПроверяемаяМодель.Вставить("date", "01.01.2024");
	
	ОжидаемыеОшибки = Новый Массив;
	ОжидаемыеОшибки.Добавить("Некорректное значение свойства ""date"". Ожидался pattern.");
	
	ИмяФайла = ТекущийСценарий().Каталог + "\КонтурФокус.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"Api3BeneficialOwnersResponseStatedCapital", ТекстСпецификации);
	
	Для Каждого ОжидаемаяОшибка Из ОжидаемыеОшибки Цикл
		
		ОшибкаВРезультате = ОшибкиПроверкиМоделиДанныхПоСпецификации.Найти(ОжидаемаяОшибка);
		Если ОшибкаВРезультате = Неопределено Тогда
			ТекстОшибки = СтрШаблон("Не возвращена ошибка: %1", ОжидаемаяОшибка);
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ОшибкиПроверкиМоделиДанныхПоСпецификации.Удалить(ОшибкаВРезультате);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ТестПроверкаСхемыСПаттерномБезОшибок() Экспорт
	
	ПроверяемаяМодель = Новый Структура;
	ПроверяемаяМодель.Вставить("sum", 555);
	ПроверяемаяМодель.Вставить("date", "2024-01-01");
	
	ИмяФайла = ТекущийСценарий().Каталог + "\КонтурФокус.json";
	ТекстСпецификации = ТекстСпецификацииИзФайла(ИмяФайла);
	
	ОшибкиПроверкиМоделиДанныхПоСпецификации = ПоддержкаOpenAPI.ОшибкиПроверкиМоделиДанныхПоСпецификации(ПроверяемаяМодель,
			"Api3BeneficialOwnersResponseStatedCapital", ТекстСпецификации);
	
	Если ЗначениеЗаполнено(ОшибкиПроверкиМоделиДанныхПоСпецификации) Тогда
		
		ТекстОшибки = СтрШаблон("Возвращены лишние ошибки: %1",
				СтрСоединить(ОшибкиПроверкиМоделиДанныхПоСпецификации, Символы.ПС));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстСпецификацииИзФайла(Знач ИмяФайла)
	
	ТекстСпецификацииИзФайла = "";
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	ТекстСпецификацииИзФайла = ТекстовыйДокумент.ПолучитьТекст();
	
	Возврат ТекстСпецификацииИзФайла;
	
КонецФункции

#Область КорректныеМоделиДанных

Функция Api3StatResponse()
	
	МодельДанных = Новый Массив;
	
	ОбъектМодели = Новый Структура;
	
	ДатаСтрокой = "2024-01-01";
	
	ОбъектМодели.Вставить("methodName", "api3/analytics");
	ОбъектМодели.Вставить("periodStartDate", ДатаСтрокой);
	ОбъектМодели.Вставить("periodEndDate", ДатаСтрокой);
	ОбъектМодели.Вставить("limitType", "LegalEntities");
	ОбъектМодели.Вставить("limit", 5000);
	ОбъектМодели.Вставить("spent", 1000);
	
	МодельДанных.Добавить(ОбъектМодели);
	
	ОбъектМодели = Новый Структура;
	
	ОбъектМодели.Вставить("methodName", "api3/analytics");
	ОбъектМодели.Вставить("periodStartDate", ДатаСтрокой);
	ОбъектМодели.Вставить("periodEndDate", ДатаСтрокой);
	ОбъектМодели.Вставить("limitType", "LegalEntities");
	ОбъектМодели.Вставить("limit", 5000);
	ОбъектМодели.Вставить("spent", 1000);
	
	МодельДанных.Добавить(ОбъектМодели);
	
	Возврат МодельДанных;
	
КонецФункции

#КонецОбласти

#КонецОбласти